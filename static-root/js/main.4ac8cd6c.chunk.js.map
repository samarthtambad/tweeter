{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetEl"],"mappings":"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","file":"static/js/main.4ac8cd6c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, {useEffect, useState} from 'react'\nimport {loadTweets} from '../lookup'\n\nexport function TweetsComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        let tempNewTweets = [...newTweets]\n        // change this to a server side call\n        tempNewTweets.unshift({\n            content: newVal,\n            likes: 0,\n            id: 12313\n        })\n        setNewTweets(tempNewTweets)\n        textAreaRef.current.value = ''\n    }\n\n    return <div className={props.className}>\n        <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n            </textarea>\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n        </form>\n        </div>\n        <TweetsList newTweets={newTweets} />\n    </div>\n}\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if(final.length !== tweets.length){\n            setTweets(final)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n    useEffect(() => {\n        // do my lookup\n        const myCallback = (response, status) => {\n            if(status === 200) {\n                setTweetsInit(response)\n            }\n        }\n        loadTweets(myCallback)\n    }, [])\n    return tweets.map((item, index) => {\n        return <Tweet tweet={item} className=\"my-5 py-5 border bg-white text-dark\" key={`${index}-{item.id}`}/>\n    })\n}\n\nexport function ActionBtn(props) {\n    const {tweet, action} = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const handleClick = (event) => {\n        event.preventDefault()\n        if(action.type === 'like') {\n            if(userLike === true) {\n                // unlike?\n                setLikes(likes - 1)\n                setUserLike(false)\n            } else {\n                setLikes(tweet.likes + 1)\n                setUserLike(true)\n            }\n        }\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}`: actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n}\n  \nexport function Tweet(props) {\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n        <p>{tweet.id} - {tweet.content}</p>\n        <div className='btn btn-group'>\n        <ActionBtn tweet={tweet} action={{type: \"like\", display: \"Likes\"}} />\n        <ActionBtn tweet={tweet} action={{type: \"unlike\", display: \"Unlike\"}} />\n        <ActionBtn tweet={tweet} action={{type: \"retweet\", display: \"Retweet\"}} />\n        </div>\n    </div>\n}\n","\nexport function loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = \"http://localhost:8000/api/tweets/\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function(){\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function(e) {\n        console.log(e)\n        callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send()\n}","import React from 'react'\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\n\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets';\nimport reportWebVitals from './reportWebVitals';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\n\nconst tweetEl = document.getElementById(\"tweeter\")\nif (tweetEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <TweetsComponent />\n    </React.StrictMode>,\n    tweetEl\n  );\n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}